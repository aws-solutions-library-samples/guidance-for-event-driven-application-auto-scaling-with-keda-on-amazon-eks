AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template for dynamic Cloud 9 setups. Creates a
  Cloud9 bootstraps the instance.
Parameters:
  C9InstanceType:
    Description: Example Cloud9 instance type
    Type: String
    Default: t3.small
    AllowedValues:
      - t3.small
      - t3.medium
    ConstraintDescription: Must be a valid Cloud9 instance type
  C9EnvType:
    Description: Environment type.
    Default: self
    Type: String
    AllowedValues:
      - self
    ConstraintDescription: must specify self.
  OwnerArn:
    Type: String
    Description: The Arn of the Cloud9 Owner.
    Default: ''
  C9InstanceVolumeSize:
    Type: Number
    Description: The Size in GB of the Cloud9 Instance Volume.
    Default: 15

Conditions:
  Create3rdPartyResources: !Equals
    - !Ref C9EnvType
    - 3rdParty

Resources:
  ################## PERMISSIONS AND ROLES #################
  C9Role:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: Environment
          Value: AWS Example
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ssm.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: Cloud9InstancePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:AssociateIamInstanceProfile
                  - ec2:ModifyInstanceAttribute
                  - ec2:ReplaceIamInstanceProfileAssociation
                  - ec2:RebootInstances
                Resource: !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
              - Effect: Allow
                Action:
                  - ssm:DescribeInstanceInformation
                  - ssm:SendCommand
                Resource: '*'

  C9LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: C9LambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:log-group:/aws/lambda/*
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStackResource
                  - cloudformation:DescribeStackResources
                Resource: !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                Resource: !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
              - Effect: Allow
                Action:
                  - ec2:AssociateIamInstanceProfile
                  - ec2:ModifyInstanceAttribute
                  - ec2:ReplaceIamInstanceProfileAssociation
                  - ec2:RebootInstances
                Resource: !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
              - Effect: Allow
                Action:
                  - iam:ListInstanceProfiles
                  - iam:PassRole
                Resource: !GetAtt C9Role.Arn

  ################## LAMBDA BOOTSTRAP FUNCTION ################

  C9BootstrapInstanceLambda:
    Description: Bootstrap Cloud9 instance
    Type: Custom::C9BootstrapInstanceLambda
    DependsOn:
      - C9BootstrapInstanceLambdaFunction
      - C9Instance
      - C9InstanceProfile
      - C9LambdaExecutionRole
    Properties:
      Tags:
        - Key: Environment
          Value: AWS Example
      ServiceToken: !GetAtt C9BootstrapInstanceLambdaFunction.Arn
      REGION: !Ref AWS::Region
      StackName: !Ref AWS::StackName
      EnvironmentId: !Ref C9Instance
      LabIdeInstanceProfileName: !Ref C9InstanceProfile
      LabIdeInstanceProfileArn: !GetAtt C9InstanceProfile.Arn

  C9BootstrapInstanceLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Tags:
        - Key: Environment
          Value: AWS Example
      Handler: index.lambda_handler
      Role: !GetAtt C9LambdaExecutionRole.Arn
      Runtime: python3.9
      MemorySize: 256
      Timeout: '600'
      Code:
        ZipFile: |
          from __future__ import print_function
          import boto3
          import json
          import os
          import time
          import traceback
          import cfnresponse
          def lambda_handler(event, context):
              # logger.info('event: {}'.format(event))
              # logger.info('context: {}'.format(context))
              responseData = {}
              status = cfnresponse.SUCCESS
              if event['RequestType'] == 'Delete':
                  responseData = {'Success': 'Custom Resource removed'}
                  cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')
              if event['RequestType'] == 'Create':
                  try:
                      # Open AWS clients
                      ec2 = boto3.client('ec2')
                      # Get the InstanceId of the Cloud9 IDE
                      instance = ec2.describe_instances(Filters=[{'Name': 'tag:Name','Values': ['aws-cloud9-'+event['ResourceProperties']['StackName']+'-'+event['ResourceProperties']['EnvironmentId']]}])['Reservations'][0]['Instances'][0]
                      # logger.info('instance: {}'.format(instance))
                      # Create the IamInstanceProfile request object
                      iam_instance_profile = {
                          'Arn': event['ResourceProperties']['LabIdeInstanceProfileArn'],
                          'Name': event['ResourceProperties']['LabIdeInstanceProfileName']
                      }
                      # logger.info('iam_instance_profile: {}'.format(iam_instance_profile))
                      # Wait for Instance to become ready before adding Role
                      instance_state = instance['State']['Name']
                      # logger.info('instance_state: {}'.format(instance_state))
                      while instance_state != 'running':
                          time.sleep(5)
                          instance_state = ec2.describe_instances(InstanceIds=[instance['InstanceId']])
                          # logger.info('instance_state: {}'.format(instance_state))
                      # attach instance profile
                      response = ec2.associate_iam_instance_profile(IamInstanceProfile=iam_instance_profile, InstanceId=instance['InstanceId'])
                      # logger.info('response - associate_iam_instance_profile: {}'.format(response))
                      r_ec2 = boto3.resource('ec2')
                      response = ec2.reboot_instances(InstanceIds=[instance['InstanceId']], DryRun=False)
                      responseData = {'Success': 'Started bootstrapping for instance: '+instance['InstanceId']}
                      cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')
                  except Exception as e:
                      status = cfnresponse.FAILED
                      print(traceback.format_exc())
                      responseData = {'Error': traceback.format_exc(e)}
                  finally:
                      cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')

  ################## SSM BOOTSRAP HANDLER ###############
  C9OutputBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  ExampleC9SSMDocument:
    Type: AWS::SSM::Document
    Properties:
      Tags:
        - Key: Environment
          Value: AWS SSM Document
      DocumentType: Command
      DocumentFormat: YAML
      Content:
        schemaVersion: '2.2'
        description: Bootstrap Cloud9 Instance
        mainSteps:
          - action: aws:runShellScript
            name: C9bootstrap
            inputs:
              runCommand:
                - '#!/bin/bash'
                - |
                  curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
                  sudo mv -v /tmp/eksctl /usr/local/bin
                  sudo curl --silent --location -o /usr/local/bin/kubectl \
                  https://amazon-eks.s3.us-west-2.amazonaws.com/1.20.4/2021-04-12/bin/linux/amd64/kubectl
                  sudo chmod +x /usr/local/bin/kubectl
                  curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                  unzip awscliv2.zip
                  sudo ./aws/install
                  curl -sSL https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
                  sudo yum -y install jq gettext bash-completion moreutils
                  go install github.com/awslabs/eks-node-viewer/cmd/eks-node-viewer@latest
                  sudo mv -v ~/go/bin/eks-node-viewer /usr/local/bin
                  curl -sS https://webinstall.dev/k9s | bash
                  kubectl completion bash >>  ~/.bash_completion
                  . /etc/profile.d/bash_completion.sh
                  . ~/.bash_completion
                  git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
                  ~/.fzf/install --all
                  sudo curl https://raw.githubusercontent.com/blendle/kns/master/bin/kns -o /usr/local/bin/kns && sudo chmod +x $_
                  sudo curl https://raw.githubusercontent.com/blendle/kns/master/bin/ktx -o /usr/local/bin/ktx && sudo chmod +x $_
                  source ~/.bashrc
                  export ACCOUNT_ID=$(aws sts get-caller-identity --output text --query Account)
                  export AWS_REGION=$(aws ec2 describe-availability-zones --output text --query 'AvailabilityZones[0].[RegionName]')
                  test -n "$AWS_REGION" && echo AWS_REGION is "$AWS_REGION" || echo AWS_REGION is not set
                  echo "export ACCOUNT_ID=${ACCOUNT_ID}" | tee -a ~/.bash_profile
                  echo "export AWS_REGION=${AWS_REGION}" | tee -a ~/.bash_profile
                  aws configure set default.region ${AWS_REGION}
                  aws configure get default.region

  C9BootstrapAssociation:
    Type: AWS::SSM::Association
    DependsOn: C9OutputBucket
    Properties:
      Name: !Ref ExampleC9SSMDocument
      OutputLocation:
        S3Location:
          OutputS3BucketName: !Ref C9OutputBucket
          OutputS3KeyPrefix: bootstrapoutput
      Targets:
        - Key: tag:SSMBootstrap
          Values:
            - Active

  ################## INSTANCE #####################
  C9InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref C9Role

  C9Instance:
    Description: '-'
    DependsOn: C9BootstrapAssociation
    Type: AWS::Cloud9::EnvironmentEC2
    Properties:
      Description: AWS Cloud9 instance for Examples
      AutomaticStopTimeMinutes: 3600
      ImageId: amazonlinux-2023-x86_64
      InstanceType: !Ref C9InstanceType
      Name: !Ref AWS::StackName
      OwnerArn: !If
        - Create3rdPartyResources
        - !Ref OwnerArn
        - !Ref AWS::NoValue
      Tags:
        - Key: SSMBootstrap
          Value: Active
        - Key: Environment
          Value: AWS Example

Outputs:
  Cloud9IDE:
    Value: !Join
      - ''
      - - https://
        - !Ref AWS::Region
        - .console.aws.amazon.com/cloud9/ide/
        - !Ref C9Instance
        - '?region='
        - !Ref AWS::Region